{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","tasks","setTasks","inputRef","useRef","className","onSubmit","e","preventDefault","name","newTasks","done","addTask","current","focus","autoFocus","onChange","target","value","placeholder","ref","type","map","task","i","style","textDecoration","onClick","toggleDoneTask","splice","removeTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAwFeA,EAhFH,WAAoB,IAAD,EACCC,mBAAiB,IADlB,mBACtBC,EADsB,KACbC,EADa,OAEHF,mBAAkB,IAFf,mBAEtBG,EAFsB,KAEfC,EAFe,KAGvBC,EAAWC,iBAAyB,MA2B1C,OACE,qBAAKC,UAAU,gBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMC,SAdG,SAACC,GAAgC,IAAD,EACnDA,EAAEC,iBACGT,KAnBS,SAACU,GACf,IAAMC,EAAiB,sBAAOT,GAAP,CAAc,CAAEQ,OAAME,MAAM,KACnDT,EAASQ,GAkBTE,CAAQb,GACRC,EAAW,IACX,UAAAG,EAASU,eAAT,SAAkBC,UASR,UACE,uBACEC,WAAS,EACTV,UAAU,eACVW,SAAU,SAACT,GAAD,OAAOP,EAAWO,EAAEU,OAAOC,QACrCC,YAAY,YACZC,IAAKjB,EACLkB,KAAK,OACLH,MAAOnB,IAET,wBAAQM,UAAU,iCAAlB,yBAIN,8BACGJ,EAAMqB,KAAI,SAACC,EAAaC,GAAd,OACT,sBAAKnB,UAAU,sBAAf,UACE,oBAAIoB,MAAO,CAAEC,eAAgBH,EAAKZ,KAAO,eAAiB,IAA1D,SACGY,EAAKd,OAER,kDAAcc,EAAKZ,SACnB,gCACE,wBACEN,UAAU,kBACVsB,QAAS,kBAlDJ,SAACH,GACtB,IAAMd,EAAiB,YAAOT,GAC9BS,EAASc,GAAT,2BAAmBd,EAASc,IAA5B,IAAgCb,MAAOD,EAASc,GAAGb,OACnDT,EAASQ,GA+CsBkB,CAAeJ,IAFhC,SAIGD,EAAKZ,KAAO,SAAM,WAErB,wBACEN,UAAU,sBACVsB,QAAS,kBAlDR,SAACH,GAClB,IAAMd,EAAiB,YAAOT,GAC9BS,EAASmB,OAAOL,EAAG,GACnBtB,EAASQ,GA+CsBoB,CAAWN,IAF5B,sCAZsCA,gBC9CzCO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ada8d5c.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface ITask {\n  name: string;\n  done: boolean;\n}\n\nconst App = (): JSX.Element => {\n  const [newTask, setNewTask] = useState<string>(\"\");\n  const [tasks, setTasks] = useState<ITask[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const addTask = (name: string): void => {\n    const newTasks: ITask[] = [...tasks, { name, done: false }];\n    setTasks(newTasks);\n  };\n\n  const toggleDoneTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks[i] = { ...newTasks[i], done: !newTasks[i].done };\n    setTasks(newTasks);\n  };\n\n  const removeTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks.splice(i, 1);\n    setTasks(newTasks);\n  };\n\n  const handleSubmit = (e: FormElement): void | any => {\n    e.preventDefault();\n    if (!newTask) return;\n    addTask(newTask);\n    setNewTask(\"\");\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <input\n                  autoFocus\n                  className=\"form-control\"\n                  onChange={(e) => setNewTask(e.target.value)}\n                  placeholder=\"Type here\"\n                  ref={inputRef}\n                  type=\"text\"\n                  value={newTask}\n                />\n                <button className=\"btn btn-success btn-block mt-2\">Save</button>\n              </form>\n            </div>\n          </div>\n          <div>\n            {tasks.map((task: ITask, i: number) => (\n              <div className=\"card card-body mt-2\" key={i}>\n                <h2 style={{ textDecoration: task.done ? \"line-through\" : \"\" }}>\n                  {task.name}\n                </h2>\n                <p>State: {`${task.done}`}</p>\n                <div>\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={() => toggleDoneTask(i)}\n                  >\n                    {task.done ? \"âœ—\" : \"âœ“\"}\n                  </button>\n                  <button\n                    className=\"btn btn-danger ml-4\"\n                    onClick={() => removeTask(i)}\n                  >\n                    Delete ðŸ—‘\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootswatch/dist/pulse/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}